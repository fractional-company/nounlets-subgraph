// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get noun(): string {
    let value = this.get("noun");
    return value!.toString();
  }

  set noun(value: string) {
    this.set("noun", Value.fromString(value));
  }
}

export class Noun extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Noun entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Noun must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Noun", id.toString(), this);
    }
  }

  static load(id: string): Noun | null {
    return changetype<Noun | null>(store.get("Noun", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nounlets(): Array<string> {
    let value = this.get("nounlets");
    return value!.toStringArray();
  }

  set nounlets(value: Array<string>) {
    this.set("nounlets", Value.fromStringArray(value));
  }
}

export class Nounlet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Nounlet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Nounlet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Nounlet", id.toString(), this);
    }
  }

  static load(id: string): Nounlet | null {
    return changetype<Nounlet | null>(store.get("Nounlet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seed(): string | null {
    let value = this.get("seed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seed(value: string | null) {
    if (!value) {
      this.unset("seed");
    } else {
      this.set("seed", Value.fromString(<string>value));
    }
  }

  get noun(): string {
    let value = this.get("noun");
    return value!.toString();
  }

  set noun(value: string) {
    this.set("noun", Value.fromString(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(<string>value));
    }
  }

  get delegateVotes(): Array<string> {
    let value = this.get("delegateVotes");
    return value!.toStringArray();
  }

  set delegateVotes(value: Array<string>) {
    this.set("delegateVotes", Value.fromStringArray(value));
  }
}

export class Seed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Seed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Seed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Seed", id.toString(), this);
    }
  }

  static load(id: string): Seed | null {
    return changetype<Seed | null>(store.get("Seed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get background(): BigInt {
    let value = this.get("background");
    return value!.toBigInt();
  }

  set background(value: BigInt) {
    this.set("background", Value.fromBigInt(value));
  }

  get body(): BigInt {
    let value = this.get("body");
    return value!.toBigInt();
  }

  set body(value: BigInt) {
    this.set("body", Value.fromBigInt(value));
  }

  get accessory(): BigInt {
    let value = this.get("accessory");
    return value!.toBigInt();
  }

  set accessory(value: BigInt) {
    this.set("accessory", Value.fromBigInt(value));
  }

  get head(): BigInt {
    let value = this.get("head");
    return value!.toBigInt();
  }

  set head(value: BigInt) {
    this.set("head", Value.fromBigInt(value));
  }

  get glasses(): BigInt {
    let value = this.get("glasses");
    return value!.toBigInt();
  }

  set glasses(value: BigInt) {
    this.set("glasses", Value.fromBigInt(value));
  }
}

export class Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Auction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Auction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Auction", id.toString(), this);
    }
  }

  static load(id: string): Auction | null {
    return changetype<Auction | null>(store.get("Auction", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nounlet(): string {
    let value = this.get("nounlet");
    return value!.toString();
  }

  set nounlet(value: string) {
    this.set("nounlet", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value!.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get bidder(): string | null {
    let value = this.get("bidder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bidder(value: string | null) {
    if (!value) {
      this.unset("bidder");
    } else {
      this.set("bidder", Value.fromString(<string>value));
    }
  }

  get settled(): boolean {
    let value = this.get("settled");
    return value!.toBoolean();
  }

  set settled(value: boolean) {
    this.set("settled", Value.fromBoolean(value));
  }

  get bids(): Array<string> {
    let value = this.get("bids");
    return value!.toStringArray();
  }

  set bids(value: Array<string>) {
    this.set("bids", Value.fromStringArray(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegate(): string | null {
    let value = this.get("delegate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set delegate(value: string | null) {
    if (!value) {
      this.unset("delegate");
    } else {
      this.set("delegate", Value.fromString(<string>value));
    }
  }

  get tokenBalanceRaw(): BigInt {
    let value = this.get("tokenBalanceRaw");
    return value!.toBigInt();
  }

  set tokenBalanceRaw(value: BigInt) {
    this.set("tokenBalanceRaw", Value.fromBigInt(value));
  }

  get tokenBalance(): BigInt {
    let value = this.get("tokenBalance");
    return value!.toBigInt();
  }

  set tokenBalance(value: BigInt) {
    this.set("tokenBalance", Value.fromBigInt(value));
  }

  get totalTokensHeldRaw(): BigInt {
    let value = this.get("totalTokensHeldRaw");
    return value!.toBigInt();
  }

  set totalTokensHeldRaw(value: BigInt) {
    this.set("totalTokensHeldRaw", Value.fromBigInt(value));
  }

  get totalTokensHeld(): BigInt {
    let value = this.get("totalTokensHeld");
    return value!.toBigInt();
  }

  set totalTokensHeld(value: BigInt) {
    this.set("totalTokensHeld", Value.fromBigInt(value));
  }

  get nounlets(): Array<string> {
    let value = this.get("nounlets");
    return value!.toStringArray();
  }

  set nounlets(value: Array<string>) {
    this.set("nounlets", Value.fromStringArray(value));
  }
}

export class NounletDelegate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NounletDelegate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NounletDelegate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NounletDelegate", id.toString(), this);
    }
  }

  static load(id: string): NounletDelegate | null {
    return changetype<NounletDelegate | null>(store.get("NounletDelegate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get delegatedVotesRaw(): BigInt {
    let value = this.get("delegatedVotesRaw");
    return value!.toBigInt();
  }

  set delegatedVotesRaw(value: BigInt) {
    this.set("delegatedVotesRaw", Value.fromBigInt(value));
  }

  get delegatedVotes(): BigInt {
    let value = this.get("delegatedVotes");
    return value!.toBigInt();
  }

  set delegatedVotes(value: BigInt) {
    this.set("delegatedVotes", Value.fromBigInt(value));
  }

  get tokenHoldersRepresentedAmount(): i32 {
    let value = this.get("tokenHoldersRepresentedAmount");
    return value!.toI32();
  }

  set tokenHoldersRepresentedAmount(value: i32) {
    this.set("tokenHoldersRepresentedAmount", Value.fromI32(value));
  }

  get tokenHoldersRepresented(): Array<string> {
    let value = this.get("tokenHoldersRepresented");
    return value!.toStringArray();
  }

  set tokenHoldersRepresented(value: Array<string>) {
    this.set("tokenHoldersRepresented", Value.fromStringArray(value));
  }

  get nounsRepresented(): Array<string> {
    let value = this.get("nounsRepresented");
    return value!.toStringArray();
  }

  set nounsRepresented(value: Array<string>) {
    this.set("nounsRepresented", Value.fromStringArray(value));
  }
}

export class DelegateVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DelegateVote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DelegateVote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DelegateVote", id.toString(), this);
    }
  }

  static load(id: string): DelegateVote | null {
    return changetype<DelegateVote | null>(store.get("DelegateVote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    return value!.toString();
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get delegate(): string {
    let value = this.get("delegate");
    return value!.toString();
  }

  set delegate(value: string) {
    this.set("delegate", Value.fromString(value));
  }

  get reason(): string | null {
    let value = this.get("reason");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set reason(value: string | null) {
    if (!value) {
      this.unset("reason");
    } else {
      this.set("reason", Value.fromString(<string>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get nounlets(): Array<string> | null {
    let value = this.get("nounlets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nounlets(value: Array<string> | null) {
    if (!value) {
      this.unset("nounlets");
    } else {
      this.set("nounlets", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bid", id.toString(), this);
    }
  }

  static load(id: string): Bid | null {
    return changetype<Bid | null>(store.get("Bid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nounlet(): string {
    let value = this.get("nounlet");
    return value!.toString();
  }

  set nounlet(value: string) {
    this.set("nounlet", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get bidder(): string | null {
    let value = this.get("bidder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bidder(value: string | null) {
    if (!value) {
      this.unset("bidder");
    } else {
      this.set("bidder", Value.fromString(<string>value));
    }
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get txIndex(): BigInt {
    let value = this.get("txIndex");
    return value!.toBigInt();
  }

  set txIndex(value: BigInt) {
    this.set("txIndex", Value.fromBigInt(value));
  }

  get auction(): string {
    let value = this.get("auction");
    return value!.toString();
  }

  set auction(value: string) {
    this.set("auction", Value.fromString(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class ActiveModules extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveModules entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ActiveModules must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ActiveModules", id.toString(), this);
    }
  }

  static load(id: string): ActiveModules | null {
    return changetype<ActiveModules | null>(store.get("ActiveModules", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _vault(): Bytes {
    let value = this.get("_vault");
    return value!.toBytes();
  }

  set _vault(value: Bytes) {
    this.set("_vault", Value.fromBytes(value));
  }

  get _modules(): Array<Bytes> {
    let value = this.get("_modules");
    return value!.toBytesArray();
  }

  set _modules(value: Array<Bytes>) {
    this.set("_modules", Value.fromBytesArray(value));
  }
}

export class AuctionBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionBid", id.toString(), this);
    }
  }

  static load(id: string): AuctionBid | null {
    return changetype<AuctionBid | null>(store.get("AuctionBid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _vault(): Bytes {
    let value = this.get("_vault");
    return value!.toBytes();
  }

  set _vault(value: Bytes) {
    this.set("_vault", Value.fromBytes(value));
  }

  get _token(): Bytes {
    let value = this.get("_token");
    return value!.toBytes();
  }

  set _token(value: Bytes) {
    this.set("_token", Value.fromBytes(value));
  }

  get _id(): BigInt {
    let value = this.get("_id");
    return value!.toBigInt();
  }

  set _id(value: BigInt) {
    this.set("_id", Value.fromBigInt(value));
  }

  get _sender(): Bytes {
    let value = this.get("_sender");
    return value!.toBytes();
  }

  set _sender(value: Bytes) {
    this.set("_sender", Value.fromBytes(value));
  }

  get _value(): BigInt {
    let value = this.get("_value");
    return value!.toBigInt();
  }

  set _value(value: BigInt) {
    this.set("_value", Value.fromBigInt(value));
  }

  get _extended(): boolean {
    let value = this.get("_extended");
    return value!.toBoolean();
  }

  set _extended(value: boolean) {
    this.set("_extended", Value.fromBoolean(value));
  }
}

export class AuctionCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionCreated", id.toString(), this);
    }
  }

  static load(id: string): AuctionCreated | null {
    return changetype<AuctionCreated | null>(store.get("AuctionCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _vault(): Bytes {
    let value = this.get("_vault");
    return value!.toBytes();
  }

  set _vault(value: Bytes) {
    this.set("_vault", Value.fromBytes(value));
  }

  get _token(): Bytes {
    let value = this.get("_token");
    return value!.toBytes();
  }

  set _token(value: Bytes) {
    this.set("_token", Value.fromBytes(value));
  }

  get _id(): BigInt {
    let value = this.get("_id");
    return value!.toBigInt();
  }

  set _id(value: BigInt) {
    this.set("_id", Value.fromBigInt(value));
  }

  get _startTime(): BigInt {
    let value = this.get("_startTime");
    return value!.toBigInt();
  }

  set _startTime(value: BigInt) {
    this.set("_startTime", Value.fromBigInt(value));
  }

  get _endTime(): BigInt {
    let value = this.get("_endTime");
    return value!.toBigInt();
  }

  set _endTime(value: BigInt) {
    this.set("_endTime", Value.fromBigInt(value));
  }
}

export class AuctionExtended extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionExtended entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionExtended must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionExtended", id.toString(), this);
    }
  }

  static load(id: string): AuctionExtended | null {
    return changetype<AuctionExtended | null>(store.get("AuctionExtended", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _endTime(): BigInt {
    let value = this.get("_endTime");
    return value!.toBigInt();
  }

  set _endTime(value: BigInt) {
    this.set("_endTime", Value.fromBigInt(value));
  }

  get _vault(): Bytes {
    let value = this.get("_vault");
    return value!.toBytes();
  }

  set _vault(value: Bytes) {
    this.set("_vault", Value.fromBytes(value));
  }

  get _token(): Bytes {
    let value = this.get("_token");
    return value!.toBytes();
  }

  set _token(value: Bytes) {
    this.set("_token", Value.fromBytes(value));
  }

  get _id(): BigInt {
    let value = this.get("_id");
    return value!.toBigInt();
  }

  set _id(value: BigInt) {
    this.set("_id", Value.fromBigInt(value));
  }
}

export class AuctionSettled extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionSettled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionSettled must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionSettled", id.toString(), this);
    }
  }

  static load(id: string): AuctionSettled | null {
    return changetype<AuctionSettled | null>(store.get("AuctionSettled", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _vault(): Bytes {
    let value = this.get("_vault");
    return value!.toBytes();
  }

  set _vault(value: Bytes) {
    this.set("_vault", Value.fromBytes(value));
  }

  get _token(): Bytes {
    let value = this.get("_token");
    return value!.toBytes();
  }

  set _token(value: Bytes) {
    this.set("_token", Value.fromBytes(value));
  }

  get _id(): BigInt {
    let value = this.get("_id");
    return value!.toBigInt();
  }

  set _id(value: BigInt) {
    this.set("_id", Value.fromBigInt(value));
  }

  get _winner(): Bytes {
    let value = this.get("_winner");
    return value!.toBytes();
  }

  set _winner(value: Bytes) {
    this.set("_winner", Value.fromBytes(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value!.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }
}

export class ContractApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ContractApprovalForAll entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContractApprovalForAll must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContractApprovalForAll", id.toString(), this);
    }
  }

  static load(id: string): ContractApprovalForAll | null {
    return changetype<ContractApprovalForAll | null>(
      store.get("ContractApprovalForAll", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class ContractDelegateChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ContractDelegateChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContractDelegateChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContractDelegateChanged", id.toString(), this);
    }
  }

  static load(id: string): ContractDelegateChanged | null {
    return changetype<ContractDelegateChanged | null>(
      store.get("ContractDelegateChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _delegator(): Bytes {
    let value = this.get("_delegator");
    return value!.toBytes();
  }

  set _delegator(value: Bytes) {
    this.set("_delegator", Value.fromBytes(value));
  }

  get _id(): BigInt {
    let value = this.get("_id");
    return value!.toBigInt();
  }

  set _id(value: BigInt) {
    this.set("_id", Value.fromBigInt(value));
  }

  get _fromDelegate(): Bytes {
    let value = this.get("_fromDelegate");
    return value!.toBytes();
  }

  set _fromDelegate(value: Bytes) {
    this.set("_fromDelegate", Value.fromBytes(value));
  }

  get _toDelegate(): Bytes {
    let value = this.get("_toDelegate");
    return value!.toBytes();
  }

  set _toDelegate(value: Bytes) {
    this.set("_toDelegate", Value.fromBytes(value));
  }
}

export class ContractDelegateVotesChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ContractDelegateVotesChanged entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ContractDelegateVotesChanged must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ContractDelegateVotesChanged", id.toString(), this);
    }
  }

  static load(id: string): ContractDelegateVotesChanged | null {
    return changetype<ContractDelegateVotesChanged | null>(
      store.get("ContractDelegateVotesChanged", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _delegate(): Bytes {
    let value = this.get("_delegate");
    return value!.toBytes();
  }

  set _delegate(value: Bytes) {
    this.set("_delegate", Value.fromBytes(value));
  }

  get _id(): BigInt {
    let value = this.get("_id");
    return value!.toBigInt();
  }

  set _id(value: BigInt) {
    this.set("_id", Value.fromBigInt(value));
  }

  get _previousBalance(): BigInt {
    let value = this.get("_previousBalance");
    return value!.toBigInt();
  }

  set _previousBalance(value: BigInt) {
    this.set("_previousBalance", Value.fromBigInt(value));
  }

  get _newBalance(): BigInt {
    let value = this.get("_newBalance");
    return value!.toBigInt();
  }

  set _newBalance(value: BigInt) {
    this.set("_newBalance", Value.fromBigInt(value));
  }
}

export class SetRoyalty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SetRoyalty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SetRoyalty must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SetRoyalty", id.toString(), this);
    }
  }

  static load(id: string): SetRoyalty | null {
    return changetype<SetRoyalty | null>(store.get("SetRoyalty", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _receiver(): Bytes {
    let value = this.get("_receiver");
    return value!.toBytes();
  }

  set _receiver(value: Bytes) {
    this.set("_receiver", Value.fromBytes(value));
  }

  get _id(): BigInt {
    let value = this.get("_id");
    return value!.toBigInt();
  }

  set _id(value: BigInt) {
    this.set("_id", Value.fromBigInt(value));
  }

  get _percentage(): BigInt {
    let value = this.get("_percentage");
    return value!.toBigInt();
  }

  set _percentage(value: BigInt) {
    this.set("_percentage", Value.fromBigInt(value));
  }
}

export class SingleApproval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SingleApproval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SingleApproval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SingleApproval", id.toString(), this);
    }
  }

  static load(id: string): SingleApproval | null {
    return changetype<SingleApproval | null>(store.get("SingleApproval", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _owner(): Bytes {
    let value = this.get("_owner");
    return value!.toBytes();
  }

  set _owner(value: Bytes) {
    this.set("_owner", Value.fromBytes(value));
  }

  get _operator(): Bytes {
    let value = this.get("_operator");
    return value!.toBytes();
  }

  set _operator(value: Bytes) {
    this.set("_operator", Value.fromBytes(value));
  }

  get _id(): BigInt {
    let value = this.get("_id");
    return value!.toBigInt();
  }

  set _id(value: BigInt) {
    this.set("_id", Value.fromBigInt(value));
  }

  get _approved(): boolean {
    let value = this.get("_approved");
    return value!.toBoolean();
  }

  set _approved(value: boolean) {
    this.set("_approved", Value.fromBoolean(value));
  }
}

export class TransferBatch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferBatch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransferBatch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransferBatch", id.toString(), this);
    }
  }

  static load(id: string): TransferBatch | null {
    return changetype<TransferBatch | null>(store.get("TransferBatch", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get ids(): Array<BigInt> {
    let value = this.get("ids");
    return value!.toBigIntArray();
  }

  set ids(value: Array<BigInt>) {
    this.set("ids", Value.fromBigIntArray(value));
  }

  get amounts(): Array<BigInt> {
    let value = this.get("amounts");
    return value!.toBigIntArray();
  }

  set amounts(value: Array<BigInt>) {
    this.set("amounts", Value.fromBigIntArray(value));
  }
}

export class TransferSingle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferSingle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransferSingle must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransferSingle", id.toString(), this);
    }
  }

  static load(id: string): TransferSingle | null {
    return changetype<TransferSingle | null>(store.get("TransferSingle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class URI extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save URI entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type URI must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("URI", id.toString(), this);
    }
  }

  static load(id: string): URI | null {
    return changetype<URI | null>(store.get("URI", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value!.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }
}

export class VaultDeployed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultDeployed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultDeployed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VaultDeployed", id.toString(), this);
    }
  }

  static load(id: string): VaultDeployed | null {
    return changetype<VaultDeployed | null>(store.get("VaultDeployed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _vault(): Bytes {
    let value = this.get("_vault");
    return value!.toBytes();
  }

  set _vault(value: Bytes) {
    this.set("_vault", Value.fromBytes(value));
  }

  get _token(): Bytes {
    let value = this.get("_token");
    return value!.toBytes();
  }

  set _token(value: Bytes) {
    this.set("_token", Value.fromBytes(value));
  }
}

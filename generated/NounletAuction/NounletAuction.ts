// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActiveModules extends ethereum.Event {
  get params(): ActiveModules__Params {
    return new ActiveModules__Params(this);
  }
}

export class ActiveModules__Params {
  _event: ActiveModules;

  constructor(event: ActiveModules) {
    this._event = event;
  }

  get _vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _modules(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class AuctionBid extends ethereum.Event {
  get params(): AuctionBid__Params {
    return new AuctionBid__Params(this);
  }
}

export class AuctionBid__Params {
  _event: AuctionBid;

  constructor(event: AuctionBid) {
    this._event = event;
  }

  get _vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _extended(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }
}

export class AuctionCreated extends ethereum.Event {
  get params(): AuctionCreated__Params {
    return new AuctionCreated__Params(this);
  }
}

export class AuctionCreated__Params {
  _event: AuctionCreated;

  constructor(event: AuctionCreated) {
    this._event = event;
  }

  get _vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _startTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _endTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AuctionExtended extends ethereum.Event {
  get params(): AuctionExtended__Params {
    return new AuctionExtended__Params(this);
  }
}

export class AuctionExtended__Params {
  _event: AuctionExtended;

  constructor(event: AuctionExtended) {
    this._event = event;
  }

  get _endTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _vault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class AuctionSettled extends ethereum.Event {
  get params(): AuctionSettled__Params {
    return new AuctionSettled__Params(this);
  }
}

export class AuctionSettled__Params {
  _event: AuctionSettled;

  constructor(event: AuctionSettled) {
    this._event = event;
  }

  get _vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _winner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NounletAuction__auctionInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getStartTime(): BigInt {
    return this.value1;
  }

  getEndTime(): BigInt {
    return this.value2;
  }

  getBidder(): Address {
    return this.value3;
  }

  getSettled(): boolean {
    return this.value4;
  }
}

export class NounletAuction__getPermissionsResultPermissionsStruct extends ethereum.Tuple {
  get module(): Address {
    return this[0].toAddress();
  }

  get target(): Address {
    return this[1].toAddress();
  }

  get selector(): Bytes {
    return this[2].toBytes();
  }
}

export class NounletAuction extends ethereum.SmartContract {
  static bind(address: Address): NounletAuction {
    return new NounletAuction("NounletAuction", address);
  }

  DURATION(): BigInt {
    let result = super.call("DURATION", "DURATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DURATION", "DURATION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_INCREASE(): i32 {
    let result = super.call("MIN_INCREASE", "MIN_INCREASE():(uint8)", []);

    return result[0].toI32();
  }

  try_MIN_INCREASE(): ethereum.CallResult<i32> {
    let result = super.tryCall("MIN_INCREASE", "MIN_INCREASE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  TIME_BUFFER(): BigInt {
    let result = super.call("TIME_BUFFER", "TIME_BUFFER():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TIME_BUFFER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("TIME_BUFFER", "TIME_BUFFER():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOTAL_SUPPLY(): BigInt {
    let result = super.call("TOTAL_SUPPLY", "TOTAL_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TOTAL_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("TOTAL_SUPPLY", "TOTAL_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WETH_ADDRESS(): Address {
    let result = super.call("WETH_ADDRESS", "WETH_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_WETH_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH_ADDRESS", "WETH_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auctionEnded(): boolean {
    let result = super.call("auctionEnded", "auctionEnded():(bool)", []);

    return result[0].toBoolean();
  }

  try_auctionEnded(): ethereum.CallResult<boolean> {
    let result = super.tryCall("auctionEnded", "auctionEnded():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  auctionInfo(param0: Address): NounletAuction__auctionInfoResult {
    let result = super.call(
      "auctionInfo",
      "auctionInfo(address):(uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new NounletAuction__auctionInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBoolean()
    );
  }

  try_auctionInfo(
    param0: Address
  ): ethereum.CallResult<NounletAuction__auctionInfoResult> {
    let result = super.tryCall(
      "auctionInfo",
      "auctionInfo(address):(uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NounletAuction__auctionInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBoolean()
      )
    );
  }

  auctionWinner(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "auctionWinner",
      "auctionWinner(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_auctionWinner(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "auctionWinner",
      "auctionWinner(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployVault(
    _modules: Array<Address>,
    plugins: Array<Address>,
    selectors: Array<Bytes>,
    _mintProof: Array<Bytes>,
    _descriptor: Address,
    _nounId: BigInt
  ): Address {
    let result = super.call(
      "deployVault",
      "deployVault(address[],address[],bytes4[],bytes32[],address,uint256):(address)",
      [
        ethereum.Value.fromAddressArray(_modules),
        ethereum.Value.fromAddressArray(plugins),
        ethereum.Value.fromFixedBytesArray(selectors),
        ethereum.Value.fromFixedBytesArray(_mintProof),
        ethereum.Value.fromAddress(_descriptor),
        ethereum.Value.fromUnsignedBigInt(_nounId)
      ]
    );

    return result[0].toAddress();
  }

  try_deployVault(
    _modules: Array<Address>,
    plugins: Array<Address>,
    selectors: Array<Bytes>,
    _mintProof: Array<Bytes>,
    _descriptor: Address,
    _nounId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployVault",
      "deployVault(address[],address[],bytes4[],bytes32[],address,uint256):(address)",
      [
        ethereum.Value.fromAddressArray(_modules),
        ethereum.Value.fromAddressArray(plugins),
        ethereum.Value.fromFixedBytesArray(selectors),
        ethereum.Value.fromFixedBytesArray(_mintProof),
        ethereum.Value.fromAddress(_descriptor),
        ethereum.Value.fromUnsignedBigInt(_nounId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  generateMerkleTree(_modules: Array<Address>): Array<Bytes> {
    let result = super.call(
      "generateMerkleTree",
      "generateMerkleTree(address[]):(bytes32[])",
      [ethereum.Value.fromAddressArray(_modules)]
    );

    return result[0].toBytesArray();
  }

  try_generateMerkleTree(
    _modules: Array<Address>
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "generateMerkleTree",
      "generateMerkleTree(address[]):(bytes32[])",
      [ethereum.Value.fromAddressArray(_modules)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getLeafNodes(): Array<Bytes> {
    let result = super.call("getLeafNodes", "getLeafNodes():(bytes32[])", []);

    return result[0].toBytesArray();
  }

  try_getLeafNodes(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getLeafNodes",
      "getLeafNodes():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getPermissions(): Array<
    NounletAuction__getPermissionsResultPermissionsStruct
  > {
    let result = super.call(
      "getPermissions",
      "getPermissions():((address,address,bytes4)[])",
      []
    );

    return result[0].toTupleArray<
      NounletAuction__getPermissionsResultPermissionsStruct
    >();
  }

  try_getPermissions(): ethereum.CallResult<
    Array<NounletAuction__getPermissionsResultPermissionsStruct>
  > {
    let result = super.tryCall(
      "getPermissions",
      "getPermissions():((address,address,bytes4)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        NounletAuction__getPermissionsResultPermissionsStruct
      >()
    );
  }

  getProof(_data: Array<Bytes>, _node: BigInt): Array<Bytes> {
    let result = super.call(
      "getProof",
      "getProof(bytes32[],uint256):(bytes32[])",
      [
        ethereum.Value.fromFixedBytesArray(_data),
        ethereum.Value.fromUnsignedBigInt(_node)
      ]
    );

    return result[0].toBytesArray();
  }

  try_getProof(
    _data: Array<Bytes>,
    _node: BigInt
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getProof",
      "getProof(bytes32[],uint256):(bytes32[])",
      [
        ethereum.Value.fromFixedBytesArray(_data),
        ethereum.Value.fromUnsignedBigInt(_node)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getRoot(_data: Array<Bytes>): Bytes {
    let result = super.call("getRoot", "getRoot(bytes32[]):(bytes32)", [
      ethereum.Value.fromFixedBytesArray(_data)
    ]);

    return result[0].toBytes();
  }

  try_getRoot(_data: Array<Bytes>): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getRoot", "getRoot(bytes32[]):(bytes32)", [
      ethereum.Value.fromFixedBytesArray(_data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hashLeafPairs(_left: Bytes, _right: Bytes): Bytes {
    let result = super.call(
      "hashLeafPairs",
      "hashLeafPairs(bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_left),
        ethereum.Value.fromFixedBytes(_right)
      ]
    );

    return result[0].toBytes();
  }

  try_hashLeafPairs(_left: Bytes, _right: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashLeafPairs",
      "hashLeafPairs(bytes32,bytes32):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(_left),
        ethereum.Value.fromFixedBytes(_right)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  log2ceil_naive(x: BigInt): BigInt {
    let result = super.call(
      "log2ceil_naive",
      "log2ceil_naive(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(x)]
    );

    return result[0].toBigInt();
  }

  try_log2ceil_naive(x: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "log2ceil_naive",
      "log2ceil_naive(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(x)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  multicall(_data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(_data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(_data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(_data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  nouns(): Address {
    let result = super.call("nouns", "nouns():(address)", []);

    return result[0].toAddress();
  }

  try_nouns(): ethereum.CallResult<Address> {
    let result = super.tryCall("nouns", "nouns():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transfer(): Address {
    let result = super.call("transfer", "transfer():(address)", []);

    return result[0].toAddress();
  }

  try_transfer(): ethereum.CallResult<Address> {
    let result = super.tryCall("transfer", "transfer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultCurator(param0: Address): Address {
    let result = super.call("vaultCurator", "vaultCurator(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_vaultCurator(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultCurator",
      "vaultCurator(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultFractions(param0: Address): BigInt {
    let result = super.call(
      "vaultFractions",
      "vaultFractions(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_vaultFractions(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultFractions",
      "vaultFractions(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifyProof(
    _root: Bytes,
    _proof: Array<Bytes>,
    _valueToProve: Bytes
  ): boolean {
    let result = super.call(
      "verifyProof",
      "verifyProof(bytes32,bytes32[],bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(_root),
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromFixedBytes(_valueToProve)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyProof(
    _root: Bytes,
    _proof: Array<Bytes>,
    _valueToProve: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyProof",
      "verifyProof(bytes32,bytes32[],bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytes(_root),
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromFixedBytes(_valueToProve)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nouns(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _transfer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateBidCall extends ethereum.Call {
  get inputs(): CreateBidCall__Inputs {
    return new CreateBidCall__Inputs(this);
  }

  get outputs(): CreateBidCall__Outputs {
    return new CreateBidCall__Outputs(this);
  }
}

export class CreateBidCall__Inputs {
  _call: CreateBidCall;

  constructor(call: CreateBidCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateBidCall__Outputs {
  _call: CreateBidCall;

  constructor(call: CreateBidCall) {
    this._call = call;
  }
}

export class DeployVaultCall extends ethereum.Call {
  get inputs(): DeployVaultCall__Inputs {
    return new DeployVaultCall__Inputs(this);
  }

  get outputs(): DeployVaultCall__Outputs {
    return new DeployVaultCall__Outputs(this);
  }
}

export class DeployVaultCall__Inputs {
  _call: DeployVaultCall;

  constructor(call: DeployVaultCall) {
    this._call = call;
  }

  get _modules(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get plugins(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get selectors(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get _mintProof(): Array<Bytes> {
    return this._call.inputValues[3].value.toBytesArray();
  }

  get _descriptor(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _nounId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class DeployVaultCall__Outputs {
  _call: DeployVaultCall;

  constructor(call: DeployVaultCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get _data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SettleCurrentAndCreateNewAuctionCall extends ethereum.Call {
  get inputs(): SettleCurrentAndCreateNewAuctionCall__Inputs {
    return new SettleCurrentAndCreateNewAuctionCall__Inputs(this);
  }

  get outputs(): SettleCurrentAndCreateNewAuctionCall__Outputs {
    return new SettleCurrentAndCreateNewAuctionCall__Outputs(this);
  }
}

export class SettleCurrentAndCreateNewAuctionCall__Inputs {
  _call: SettleCurrentAndCreateNewAuctionCall;

  constructor(call: SettleCurrentAndCreateNewAuctionCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _mintProof(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class SettleCurrentAndCreateNewAuctionCall__Outputs {
  _call: SettleCurrentAndCreateNewAuctionCall;

  constructor(call: SettleCurrentAndCreateNewAuctionCall) {
    this._call = call;
  }
}

export class WithdrawNounletCall extends ethereum.Call {
  get inputs(): WithdrawNounletCall__Inputs {
    return new WithdrawNounletCall__Inputs(this);
  }

  get outputs(): WithdrawNounletCall__Outputs {
    return new WithdrawNounletCall__Outputs(this);
  }
}

export class WithdrawNounletCall__Inputs {
  _call: WithdrawNounletCall;

  constructor(call: WithdrawNounletCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawNounletCall__Outputs {
  _call: WithdrawNounletCall;

  constructor(call: WithdrawNounletCall) {
    this._call = call;
  }
}

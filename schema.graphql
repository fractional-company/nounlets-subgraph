scalar BigInt
directive @entity repeatable on OBJECT
directive @derivedFrom(
  field: String!
) on FIELD_DEFINITION


type Vault @entity {
  "The Vault's address"
  id: ID!

  "A Noun that the Vault holds"
  noun: Noun
}

type Account @entity {
  "An Account is any address that holds any amount of Nounlets, the id used is the blockchain address."
  id: ID!

  "Nounlet balance of this address expressed in the smallest unit of the Nounlet's ERC1155 Token"
  nounletBalanceRaw: BigInt!

  "Nounlet balance of this address expressed as a BigInt normalized value for the Nounlet's ERC1155 Token"
  nounletBalance: BigInt!

  "Total amount of Nounlets ever held by this address expressed as a BigInt normalized value for the Nounlets ERC1155 Token"
  totalNounletsHeld: BigInt!

  "The Nounlets held by this account"
  nounlets: [Nounlet!]!
}

type Noun @entity {
  "The Noun's ERC721 token id"
  id: ID!

  "Fractions of a Noun"
  nounlets: [Nounlet!]! @derivedFrom(field: "noun")
}

type Nounlet @entity {
  "The Nounlet's FERC1155 token id"
  id: ID!

  "The seed used to determine the Nounlet's traits"
  seed: Seed

  "The Noun ID that the Nounlet is derived from"
  noun: Noun!

  "A Nounlet holder"
  holder: Account

  "Nounlet delegate"
  delegate: Delegate

  "Auction belonging to a Nounlet"
  auction: Auction @derivedFrom(field: "nounlet")

  "Delegate votes that the Nounlet casted"
  delegateVotes: [DelegateVote!]! @derivedFrom(field: "nounlet")
}

type Seed @entity {
  "The Noun's ERC721 token id"
  id: ID!

  "The background index"
  background: BigInt!

  "The body index"
  body: BigInt!

  "The accessory index"
  accessory: BigInt!

  "The head index"
  head: BigInt!

  "The glasses index"
  glasses: BigInt!
}

type Auction @entity {
  "The Nounlet's FERC1155 token id"
  id: ID!

  "The Nounlet"
  nounlet: Nounlet!

  "The current highest bid amount"
  amount: BigInt!

  "The time that the auction started"
  startTime: BigInt!

  "The time that the auction is scheduled to end"
  endTime: BigInt!

  "The account with the current highest bid"
  bidder: Account

  "Whether or not the auction has been settled"
  settled: Boolean!

  "The auction bids"
  bids: [Bid!]! @derivedFrom(field: "auction")
}

type Delegate @entity {
  "Wallet address of the delegate + Noun ID"
  id: ID!

  # "Noun ID that the delegate belongs to"
  # noun: Noun!

  "Amount of votes delegated to this delegate to be used on proposal votings expressed as a BigInt normalized value for the Nouns ERC721 Token"
  delegatedVotes: BigInt!

  "The amount of token holders the Delegate represents"
  nounletsRepresentedAmount: BigInt!


  "Nounlets that this delegate represents"
  nounletsRepresented: [Nounlet!]! @derivedFrom(field: "delegate")

#  "Whether a Delegate represents a Noun he belongs to"
#  representsNoun: Boolean!
}

type DelegateVote @entity {
  "Delegate ID + Nounlet ID"
  id: ID!

  "Nounlet that casts a vote"
  nounlet: Nounlet!

  "Delegate receiving a vote"
  delegate: Delegate!

  "The optional vote reason"
  reason: String

  "Timestamp of the vote"
  timestamp: BigInt!
}

type Bid @entity {
  "Bid transaction hash"
  id: ID!

  "The auction being bid in"
  auction: Auction!

  "Bidder account"
  bidder: Account

  "Bid amount"
  amount: BigInt!

  "Block number of the bid"
  blockNumber: BigInt!

  "The timestamp of the block the bid is in"
  blockTimestamp: BigInt!

  "Index of transaction within block"
  txIndex: BigInt!
}

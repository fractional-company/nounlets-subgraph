type Vault @entity {
  "The Vault's address"
  id: ID!
  noun: Noun
}

type Noun @entity {
  "The Noun's ERC721 token id"
  id: ID!
  "Nounlets that belong to the Noun"
  nounlets: [Nounlet!]! @derivedFrom(field: "noun")
}

type Nounlet @entity {
  "The Nounlet's FERC1155 token id"
  id: ID!

  "The seed used to determine the Nounlet's traits"
  seed: Seed

  "The Noun ID that the Nounlet is derived from"
  noun: Noun!

  "Owner of the Nounlet"
  owner: Account

  "Delegate votes that the Nounlet casted"
  delegateVotes: [DelegateVote!]! @derivedFrom(field: "nounlets")
}

type Seed @entity {
  "The Noun's ERC721 token id"
  id: ID!

  "The background index"
  background: BigInt!

  "The body index"
  body: BigInt!

  "The accessory index"
  accessory: BigInt!

  "The head index"
  head: BigInt!

  "The glasses index"
  glasses: BigInt!
}

type Auction @entity {
  "The Nounlet's FERC1155 token id"
  id: ID!

  "The Nounlet"
  nounlet: Nounlet!

  "The current highest bid amount"
  amount: BigInt!

  "The time that the auction started"
  startTime: BigInt!

  "The time that the auction is scheduled to end"
  endTime: BigInt!

  "The account with the current highest bid"
  bidder: Account

  "Whether or not the auction has been settled"
  settled: Boolean!

  "The auction bids"
  bids: [Bid!]! @derivedFrom(field: "auction")
}

type Account @entity {
  "An Account is any address that holds any amount of Nounlets, the id used is the blockchain address."
  id: ID!

  "Delegate address of the token holder which will participate in votings. Delegates don't need to hold any tokens and can even be the token holder itself."
  delegate: Delegate

  "Noun balance of this address expressed in the smallest unit of the Nounlet's ERC1155 Token"
  tokenBalanceRaw: BigInt!

  "Noun balance of this address expressed as a BigInt normalized value for the Nouns ERC721 Token"
  tokenBalance: BigInt!

  "Total amount of Nouns ever held by this address expressed in the smallest unit of the Nouns ERC721 Token"
  totalTokensHeldRaw: BigInt!

  "Total amount of Nounlets ever held by this address expressed as a BigInt normalized value for the Nounlets ERC1155 Token"
  totalTokensHeld: BigInt!

  "The Nounlets owned by this account"
  nounlets: [Nounlet!]!
}

type Delegate @entity {
  "A Delegate is any address that has been delegated with voting tokens by a token holder, id is the blockchain address of said delegate"
  id: ID!

  "Amount of votes delegated to this delegate to be used on proposal votings expressed in the smallest unit of the Nouns ERC721 Token"
  delegatedVotesRaw: BigInt!

  "Amount of votes delegated to this delegate to be used on proposal votings expressed as a BigInt normalized value for the Nouns ERC721 Token"
  delegatedVotes: BigInt!

  tokenHoldersRepresentedAmount: Int!

  "Token holders that this delegate represents"
  tokenHoldersRepresented: [Account!]! @derivedFrom(field: "delegate")

  "Nounlets that this delegate represents"
  nounletsRepresented: [Nounlet!]!
}

type DelegateVote @entity {
  "Delegate ID + Nounlet ID"
  id: ID!

  "Nounlet that casts a vote"
  voter: Account!

  "Delegate receiving a vote"
  delegate: Delegate!

  "The optional vote reason"
  reason: String

  "Timestamp of the vote"
  timestamp: BigInt!

  "The Nounlets used to vote"
  nounlets: [Nounlet!]
}

type Bid @entity {
  "Bid transaction hash"
  id: ID!

  "The Nounlet being bid on"
  nounlet: Nounlet!

  "Bid amount"
  amount: BigInt!

  "Bidder account"
  bidder: Account

  "Block number of the bid"
  blockNumber: BigInt!

  "Index of transaction within block"
  txIndex: BigInt!

  "The auction being bid in"
  auction: Auction!

  "The timestamp of the block the bid is in"
  blockTimestamp: BigInt!
}
